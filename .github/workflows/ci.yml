name: CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main ]

jobs:
  test:
    runs-on: ubuntu-latest
    strategy:
      matrix:
        python-version: [3.8, 3.9, "3.10", "3.11", "3.12", "3.13"]

    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python ${{ matrix.python-version }}
      uses: actions/setup-python@v5
      with:
        python-version: ${{ matrix.python-version }}
    
    - name: Install dependencies
      run: |
        python -m pip install --upgrade pip
        pip install -r requirements.txt
        
    - name: Install package in development mode
      run: |
        pip install -e .
        
    - name: Run basic functionality tests
      run: |
        python test_package.py
        
    - name: Run unit tests
      run: |
        python tests/test_analysis.py
        
    - name: Run comprehensive tests
      run: |
        python -m unittest tests.tests -v
        
    - name: Test CLI functionality
      run: |
        python -m benford_midi.cli --help
        
    - name: Test package import
      run: |
        python -c "import benford_midi; print(f'Package version: {benford_midi.__version__}')"
        
    - name: Test core functionality
      run: |
        python -c "from benford_midi import BenfordTests, generate_benford_sample; data = generate_benford_sample(100); test = BenfordTests(data); print('Core functionality works')"

  lint:
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install linting dependencies
      run: |
        python -m pip install --upgrade pip
        pip install flake8 black
        
    - name: Run flake8
      run: |
        flake8 src/ tests/ --count --select=E9,F63,F7,F82 --show-source --statistics
        flake8 src/ tests/ --count --exit-zero --max-complexity=10 --max-line-length=127 --statistics
        
    - name: Check code formatting with black
      run: |
        black --check --diff src/ tests/

  build:
    needs: [test, lint]
    runs-on: ubuntu-latest
    
    steps:
    - uses: actions/checkout@v4
    
    - name: Set up Python
      uses: actions/setup-python@v5
      with:
        python-version: "3.11"
        
    - name: Install build dependencies
      run: |
        python -m pip install --upgrade pip
        pip install build twine
        
    - name: Build package
      run: |
        python -m build
        
    - name: Check distribution
      run: |
        twine check dist/*
        
    - name: Upload artifacts
      uses: actions/upload-artifact@v4
      with:
        name: dist-files
        path: dist/
